// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// solve_linear
arma::mat solve_linear(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _rcudarmadillo_solve_linear(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_linear(A, B));
    return rcpp_result_gen;
END_RCPP
}
// inverse_matrix
arma::mat inverse_matrix(const arma::mat& A);
RcppExport SEXP _rcudarmadillo_inverse_matrix(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_matrix(A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcudarmadillo_solve_linear", (DL_FUNC) &_rcudarmadillo_solve_linear, 2},
    {"_rcudarmadillo_inverse_matrix", (DL_FUNC) &_rcudarmadillo_inverse_matrix, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcudarmadillo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
